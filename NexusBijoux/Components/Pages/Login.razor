@page "/"
@using NexusBijoux.Components.Models

<form>
    <div class="login-container">
        <h3>Iniciar Sesión</h3>

        <EditForm Model="loginModel" class="login-form" OnSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />

            <div class="form-group">
                <label for="email" class="form-label">Email:</label>
                <InputText @bind-Value="loginModel.Email" id="email" placeholder="Introduce tu email" class="form-control" />
            </div>

            <div class="form-group">
                <label for="password" class="form-label">Contraseña:</label>
                <InputText @bind-Value="loginModel.Password" type="password" id="password" placeholder="Introduce tu contraseña" class="form-control" />
            </div>
            <button type="submit" class="btn btn-secondary btn-block mt-3">Iniciar Sesión</button>
        </EditForm>
        
    </div>
</form>

<style>
    .login-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 100vh;
        background-color: #f7f7f7;
    }

    h3 {
        margin-bottom: 20px;
        color: #333;
    }

    .login-form {
        width: 100%;
        max-width: 400px;
        padding: 20px;
        border: 1px solid #ddd;
        border-radius: 8px;
        background-color: white;
        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
    }

    .form-group {
        margin-bottom: 15px;
    }

    .form-group label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
    }

    .form-control {
        width: 100%;
        padding: 10px;
        font-size: 16px;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    .btn-secondary:hover {
        background-color: #0056b3;
    }
</style>

@code {
    private LoginDTO loginModel = new LoginDTO();
    
    [Inject]
    private HttpClient Http { get; set; }
    
    [Inject]
    private NavigationManager NavigationManager { get; set; }
    
    [Inject]
    private IJSRuntime JS { get; set; }

    private async Task HandleLogin()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/Account/Login", loginModel);
            if (response.IsSuccessStatusCode)
            {
                var token = await response.Content.ReadFromJsonAsync<string>();
                await JS.InvokeVoidAsync("localStorage.setItem", "authToken", token);
                NavigationManager.NavigateTo("/createaccount");
            }
            else
            {
                Console.WriteLine($"Usuario o contraseña incorrectos. Código de estado: {response.StatusCode}");

            }
        }
        catch (Exception ex)
        {
            // Manejar cualquier excepción que pueda ocurrir
            Console.WriteLine($"Error durante el login: {ex.Message}");
        }
    }
    
    private void RedirectToCreateAccount()
    {
        Console.WriteLine("Redirigiendo a " + "/createaccount");
        NavigationManager.NavigateTo("/createaccount");
    }
}